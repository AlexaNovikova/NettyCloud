         1. Как организовать клиент-серверное взаимодействие?
         2. Как и в каком виде передавать файлы?
         3. Как пересылать большие файлы?
         4. Как пересылать служебные команды?
         5. Что хранить в базе данных?
         6. Как передавать структуру каталогов/файлов?
         7. Какую библиотеку использовать для сетевого взаимодействия: java.io, java.nio, Netty?
     
         ---

         ### Ответы:

         1. Используем TCP-сокеты.
         На сервере:
         создается конечная точка коммуникации (ServerSocket).
         Cокету присваивается уникальный номер и для него резервируется уникальная комбинации IP-адреса и порта.
         После создания сокета сервер ожидает подключения клиента.
         Сервер получает запрос на подключение от клиентского сокета. Accept().
         Клиент и сервер соединены друг с другом. Connect().
         Обмен данными между клиентом и сервером. Send()/Recieve()
         После обмена данными сервер и клиент разрывают соединение Close().

         На клиенте:
         создание клиентского сокета;
         установка параметров сокета (IP-адрес и порт, к которым необходимо подключиться);
         установка соединения между сокетом и удаленной конечной точкой;
         отправка/получение информации;
         разрыв соединения и освобождение сокета.


         2. Для передачи данных используем класс FileOutputStream.

         Особенности:

         При открытии файла на запись, если файл не существует, то он будет создан.
         Если файл существует, то он будет полностью обновлен. Т.е. если открыть и сразу закрыть файл,
         то содержимое файла будет уничтожено; реальный файл на диске станет нулевой длины.
         Исключением для предыдущего правила является последний из конструкторов.
         Если третьему параметру append присвоить значение true, то можно будет дописывать в конец файла.

         3. Передача больших файлов с организуется помощью буфера.

         4. Служебные команды передавать в форме объектов. Сделать класс (содержит тип команды/сообщение) - для обмена
         командами между клиентом и сервером.

         5. В базе данных хранить авторизационные данные клиента(логин, пароль).

         6.  На сервере для каждого клиента своя папка ( имя совпадает с
         уникальным логином).
         если клиент хочет создать подкаталоги - отправляет служебное сообщение ( команду) - создает подкаталог.
         Имя каталога в виде строки передает с командой.
         Перед передачей файла отправляет команду с указанием пути с использованием Separator.
         При получении файлов с сервера они будут загружаться в одну папку - Загрузки( например).
         Возможно потом добавить выбор пути для сохранения файла.

         7.Для сетевого взаимодействия на данный момент предполагаю использовать библиотеку java.io

         В дальнейшем при изучении Netty -  использовать ее возможности.
         Nio предпочтительнее использовать при большом количестве соединений и при незначительном объеме передаваемых данных.
         IO - при меньшем количестве соединений, но большом объеме передаваемых данных.
         В рамках данного курса ( поскольку не будет ни большого количества подключений, ни большого объеема передаваемх
         файлов)  можно использовать любую библиотеку.
